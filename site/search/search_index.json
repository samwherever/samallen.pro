{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello there.","text":""},{"location":"#im-a-technical-writer-in-chicago-il-take-a-look-at-my-resume-view-my-portfolio-or-send-me-a-message","title":"I'm a technical writer in Chicago, IL. Take a look at my resum\u00e9, view my portfolio, or send me a message.","text":"<p>You can also find me on GitHub.</p>"},{"location":"resume/","title":"Resume","text":""},{"location":"resume/#technical-skills","title":"Technical Skills","text":"<ul> <li>Git/GitHub</li> <li>Bash, Z Shell (Zsh)</li> <li>HTML, CSS, JavaScript</li> <li>JSON, YAML, Markdown</li> <li>APIs and API Documentation</li> <li>Static site generators: MkDocs, Jekyll, Markdoc, Hugo</li> <li>Adobe Photoshop, Adobe Premiere Pro, Adobe After Effects, Adobe InDesign</li> <li>Video Editing, Motion Graphics</li> </ul>"},{"location":"resume/#professional-experience","title":"Professional Experience","text":"<p>Technical Writer and Video Producer - Sertifi  March 2020 - Present   Chicago, IL</p> <p>Technical Writer (Contract) - CodeLathe  August 2019 - December 2019  Austin, TX</p> <p>Writer &amp; Editor (Contract) - Liaison Creative May 2019 - August 2019  Austin, TX</p> <p>UX Writer (Contract) - Institute for Creative Integration March 2019 - October 2019  Austin, TX/San Jose, CA</p> <p>Content Specialist &amp; Video Editor - Wick Marketing August 2017 - January 2019  Austin, TX</p> <p>English Language Teaching Assistant - Minist\u00e8re de l\u2019\u00c9ducation September 2016 - May 2017  Laon, France</p> <p>Freelance Writer/Graphic Designer  March 2016 - September 2016  Austin, TX</p> <p>Media Buyer - Native Commerce July 2015 - March 2016  Austin, TX</p> <p>Technical Content Writer - Accella November 2013 - June 2015  Austin, TX</p>"},{"location":"portfolio/api_documentation/","title":"API Documentation","text":""},{"location":"portfolio/api_documentation/#api-demo-guide","title":"API Demo Guide","text":""},{"location":"portfolio/api_documentation/#developer-center","title":"Developer Center","text":""},{"location":"portfolio/developer-resources/","title":"Developer Resources","text":""},{"location":"portfolio/developer-resources/#coding-standards","title":"Coding Standards","text":"<p>These are samples of internal coding standards that I edited at Sertifi.</p> <p></p> <p></p>"},{"location":"portfolio/knowledge_base/","title":"Knowledge Base","text":"<p>Note</p> <p>This was written as an article for non-technical users in an internal knowledge base, explaining the differences between the company's two APIs.</p>"},{"location":"portfolio/knowledge_base/#api-primer","title":"API Primer","text":"<p>REST, or REpresentional State Transfer, is a technology for enabling Web services to more easily interact and work with data. Through a REST API, a program can connect to a different program via the Web in order to perform CRUD operations - Create, Replace, Update, or Delete. The Sertifi REST API enables a client's application to connect to the Sertifi application to access and edit booking data (signatures, participants, payments, etc).</p> <p>For Sertifi, the REST and SOAP APIs serve the same purpose - enabling customers to connect to our application - but each customer will use either SOAP or REST depending on their technical resources and requirements. The REST API is most common, as it's easier and cheaper to set up and run.</p> <p>Tip</p> <p>REST is like a Ferrari - popular because it's fast, flexible, and more fun to use.</p> <p>SOAP is like an ambulance - used for very important reasons, but typically reserved only for situations where it's truly needed.</p> <p>REST API Advantages</p> <ul> <li>REST APIs can send and receive data in JSON, CSV, or RSS formats, which are used by a wide variety of programming languages, such as JavaScript, Python, Ruby, and Go.</li> <li>REST calls use common English verbs (GET, POST, PUT, DELETE) to describe their purpose, making it easier to understand what a particular function is intended to accomplish.</li> <li>The response codes for REST are the same as HTTP response codes used across the web, which can make it easier to understand if a call was successful or not, and why. For instance, a GET call requesting a resource that could not be found would result in the familiar 404 NOT FOUND error message.</li> <li>REST uses significantly less bandwidth than SOAP, making the process faster and much more efficient.</li> <li>The JSON format commonly used by REST APIs is easier to work with than the XML format used by SOAP APIs. For example, to input data for a group of four people using XML, you'd have to write something like:</li> </ul> <pre><code>&lt;band_members&gt;\n    &lt;member&gt;\n       &lt;name&gt;John&lt;/name&gt;\n       &lt;instrument&gt;Guitar&lt;/instrument&gt;\n    &lt;/member&gt;\n    &lt;member&gt;\n       &lt;name&gt;Paul&lt;/name&gt;\n       &lt;instrument&gt;Bass Guitar&lt;/instrument&gt;\n    &lt;/member&gt;\n    &lt;member&gt;\n      &lt;name&gt;George&lt;/name&gt;\n      &lt;instrument&gt;Guitar&lt;/instrument&gt;\n    &lt;/member&gt;\n    &lt;member&gt;\n      &lt;name&gt;Ringo&lt;/name&gt;\n      &lt;instrument&gt;Drums&lt;/instrument&gt;\n    &lt;/member&gt;\n&lt;/band_members&gt;\n</code></pre> <p>To accomplish the same thing in JSON, all you would need to write is:</p> <pre><code>\"band_members\":[\n     {\n      \"name\": \"John\",\n      \"instrument\":\"guitar\"\n     },\n     {\n      \"name\": \"Paul\",\n      \"instrument\":\"bass guitar\"\n    },\n    {\n      \"name\": \"George\",\n      \"instrument\":\"guitar\"\n    },\n    {\n     \"name\": \"Ringo\",\n     \"instrument\":\"drums\"\n    }\n ]\n</code></pre> <p>HTTP Response Code Reference</p> <p>Tip</p> <p>This table is a general overview of what various status codes signify. The exact meaning of a status code will depend on the call\u2019s method (GET, PUT, POST, DELETE) and what it was requesting or attempting to change. For example, a successful call using the <code>GET /v1/folders/{folderId}</code> method would return the HTTP response code 200, with a link to the folder that was requested.</p> Code Number Code Response Definition Notes &amp; Fixes 200 OK Successful request 201 Created Successful request. A new resource has been created. 204 N/A The server has successfully fulfilled the request, but there is no content to send in the response. Example: You ran a DELETE call, in which there is no data to return. The server returns the 204 code to indicate a successful operation. 400 Bad Request The API Server is refusing the request because of one or more errors in syntax, or missing information. Ensure the request contains no syntax errors or spelling errors, as well asconfirming that the request type (GET, POST, PUT, DELETE) contains the required parameters. 401 Unauthorized The API server understood the request, meaning that the call was properly entered, but the server will not fulfill the request unless the user can prove they are authorized. Ensure the customer is using the correct API access code. The 401 error code signifies that authentication is still possible, e.g. that they will eventually be able to make the call after fixing the authentication problem. 403 Forbidden The API server understood the request, meaning that the call was properly entered, but the user is prohibited from making API calls. The 403 error code signifies that authentication is not, and never will be possible with the customer's current API key. 409 Conflict There is a conflict between the resource currently available on the server and the resource that the user is attempting to upload. This usually occurs during a PUT call as the user attempts to replace or update a file. 500 Internal Server Error General error code Attempt the API call once more 504 Gateway Timeout The server \u201ctimed out\u201d, or took too long to respond to the request. Try the request again in a few minutes. If this error persists, ensure the infrastructure team is aware."},{"location":"portfolio/product-documentation/","title":"Product Documentation","text":""},{"location":"portfolio/release-notes/","title":"Release Notes","text":"<p>At Sertifi, I completely rebuilt how release notes were written, categorized, and published. Notable improvements included:</p> <ul> <li>The addition of development ticket numbers, expediting the diagnosis of problems related to release items.</li> <li>Implemenation of semantic versioning, to better communicate what had changed in the release and its attendant impact on API access</li> <li>Biweekly release note emails to notify customers of new features, performance improvements, and bug fixes</li> </ul> <p></p> <p></p>"},{"location":"portfolio/support_sites/","title":"Support Sites","text":"<p>As the technical writer at Sertifi, I completely rebuilt the customer support site ahead of a complete overhaul of the company's primary software products. This process included cleaning up old documentation, removing years of outdated information, and creating completely new documentation for the new versions of the products. I also completely reconfigured how support videos were written, produced, and published.</p> <p></p> <p></p> <p></p>"},{"location":"portfolio/video/","title":"Video","text":"<p>As part of rebuilding Sertifi's support center, I created new workflows for how support videos were created, produced, and published. These videos were written, narrated, designed, animated, and edited by me.</p> <p>Features of note:</p> <ul> <li>Use of brand colors and fonts</li> <li>Custom writing and voice overs</li> <li>Custom animation</li> <li>Tables of content and built-in chaptering for easy navigation and searching</li> <li>Full captioning</li> </ul> <p></p> <p>For accessibility and usability purposes, I also went through each caption to correct for spelling, grammar, and product language.</p> <p></p> <p>To further improve accessibility, I began writing French subtitles for the videos as well.</p> <p></p>"}]}